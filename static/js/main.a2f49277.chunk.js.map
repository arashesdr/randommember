{"version":3,"sources":["components/CardView/UserCard.tsx","components/CardView/CardView.tsx","utils/paginate.ts","components/GridView/Pagination.tsx","components/GridView/UserRow.tsx","components/GridView/Users.tsx","components/GridView/GridView.tsx","services/server.ts","services/usersServices.ts","components/Header.tsx","App.tsx","index.tsx"],"names":["UserCard","user","className","src","picture","large","alt","name","first","substr","toUpperCase","last","title","nat","location","country","CardView","usersInfo","useState","currentPage","setCurrentPage","pageUsers","setPageUsers","perPage","serverConfig","pageItemCount","useEffect","hasPaginate","newPage","courses","takeCount","_","slice","take","value","paginateCard","length","map","index","loading","color","onClick","Pagination","totalUsers","onPageChange","pageCount","Math","ceil","pages","range","page","style","cursor","UserRow","medium","Users","children","GridView","startIndex","paginateGrid","server","axios","create","baseURL","fetchUsersApiUrl","headers","fetchUsers","usersCount","fetchItemsCount","url","get","Header","onDropdownChange","buttonMode","App","viewMode","setViewMode","users","setUsers","error","setError","getUsers","a","result","arr","data","results","toast","ReactDOM","render","StrictMode","position","autoClose","hideProgressBar","transition","Flip","document","getElementById"],"mappings":"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","file":"static/js/main.a2f49277.chunk.js","sourcesContent":["import { IUser } from '../../models/user.model';\r\n\r\nconst UserCard = (user: IUser) => (\r\n\t<div>\r\n\t\t<div className=\"column chip\">\r\n\t\t\t<img\r\n\t\t\t\tsrc={user.picture.large}\r\n\t\t\t\talt={`${user.name.first.substr(0, 1).toUpperCase()}${user.name.last\r\n\t\t\t\t\t.substr(0, 1)\r\n\t\t\t\t\t.toUpperCase()}`}\r\n\t\t\t\tclassName={\r\n\t\t\t\t\tuser.name.title === 'Mr' ? 'chip-img chip-img-border-man' : 'chip-img'\r\n\t\t\t\t}\r\n\t\t\t/>\r\n\t\t\t<img\r\n\t\t\t\tclassName=\"chip-flag\"\r\n\t\t\t\tsrc={`https://www.countryflags.io/${user.nat}/shiny/64.png`}\r\n\t\t\t\talt={user.nat}\r\n\t\t\t/>\r\n\t\t\t<h5>{`${user.name.first} ${user.name.last}`}</h5>\r\n\t\t\t<h6>{user.location.country}</h6>\r\n\t\t</div>\r\n\t</div>\r\n);\r\n\r\nexport default UserCard;\r\n","import { useEffect, useState } from 'react';\r\nimport ScaleLoader from 'react-spinners/ScaleLoader';\r\nimport { paginateCard } from '../../utils/paginate';\r\nimport serverConfig from '../../data/config.json';\r\nimport { IUsers } from '../../models/user.model';\r\nimport UserCard from './UserCard';\r\nimport './card.css';\r\n\r\n//Create card for each user\r\nconst CardView = ({ usersInfo }: IUsers) => {\r\n\tconst [currentPage, setCurrentPage] = useState<number>(1);\r\n\tconst [pageUsers, setPageUsers] = useState<any[]>([]);\r\n\tconst perPage: number = serverConfig.pageItemCount;\r\n\r\n\tuseEffect(() => {\r\n\t\t//Set data for each page\r\n\t\tif (serverConfig.hasPaginate === true) {\r\n\t\t\tconst newPage = paginateCard(usersInfo, currentPage, perPage);\r\n\t\t\tsetPageUsers(newPage);\r\n\t\t} else setPageUsers(usersInfo);\r\n\t}, [usersInfo, currentPage, perPage]);\r\n\r\n\t//Set current page\r\n\tconst handlePageChange = (page: number) => {\r\n\t\tsetCurrentPage(page);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{pageUsers.length > 0 ? (\r\n\t\t\t\tpageUsers.map((user, index) => {\r\n\t\t\t\t\treturn <UserCard key={index} {...user} />;\r\n\t\t\t\t})\r\n\t\t\t) : (\r\n\t\t\t\t<div className=\"loading-page\">\r\n\t\t\t\t\t<ScaleLoader loading={true} color={'#4495b3'} />\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{pageUsers.length >= usersInfo.length ? null : (\r\n\t\t\t\t<div className=\"column chip\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"load-more-btn\"\r\n\t\t\t\t\t\tonClick={() => handlePageChange(currentPage + 1)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tLoad More\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardView;\r\n","import _ from 'lodash';\r\n\r\n//Take data from array in pagginate for Grid View\r\nexport const paginateGrid = (\r\n\tcourses: any[],\r\n\tcurrentPage: number,\r\n\tperPage: number\r\n) => {\r\n\tconst startIndex = (currentPage - 1) * perPage;\r\n\treturn _(courses).slice(startIndex).take(perPage).value();\r\n};\r\n\r\n//Take data from array in pagginate for Card View\r\nexport const paginateCard = (\r\n\tcourses: any[],\r\n\tcurrentPage: number,\r\n\tperPage: number\r\n) => {\r\n\tconst takeCount = currentPage * perPage;\r\n\treturn _(courses).slice(0).take(takeCount).value();\r\n};\r\n","import { range } from 'lodash';\r\nimport serverConfig from '../../data/config.json';\r\n\r\ninterface IPagination {\r\n\ttotalUsers: number;\r\n\tcurrentPage: number;\r\n\tonPageChange: (page: number) => void; //Click method for each page\r\n}\r\n\r\n//Pagination for users data in grid view\r\nconst Pagination = ({ totalUsers, currentPage, onPageChange }: IPagination) => {\r\n\tconst perPage: number = serverConfig.pageItemCount;\r\n\tconst pageCount = Math.ceil(totalUsers / perPage);\r\n\r\n\t//If all data are only 1 page return null as pagination\r\n\tif (pageCount === 1) return null;\r\n\r\n\t//Get number of pages\r\n\tconst pages = range(1, pageCount + 1);\r\n\r\n\treturn (\r\n\t\t<div className=\"pagination\">\r\n\t\t\t{pages.map((page, index) => (\r\n\t\t\t\t<button\r\n\t\t\t\t\tkey={index}\r\n\t\t\t\t\tclassName={page === currentPage ? 'active' : 'page-link'}\r\n\t\t\t\t\tstyle={{ cursor: 'pointer' }}\r\n\t\t\t\t\tonClick={() => onPageChange(page)}\r\n\t\t\t\t>\r\n\t\t\t\t\t{page}\r\n\t\t\t\t</button>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Pagination;\r\n","import { IUser } from '../../models/user.model';\r\n\r\n//Create grid rows by getting user data\r\nconst UserRow = (user: IUser) => (\r\n\t<div className=\"users-table__row\">\r\n\t\t<div className=\"users-table__row__div\">\r\n\t\t\t<img\r\n\t\t\t\tsrc={user.picture.medium}\r\n\t\t\t\talt={`${user.name.first.substr(0, 1).toUpperCase()}${user.name.last\r\n\t\t\t\t\t.substr(0, 1)\r\n\t\t\t\t\t.toUpperCase()}`}\r\n\t\t\t\tclassName={\r\n\t\t\t\t\tuser.name.title === 'Mr'\r\n\t\t\t\t\t\t? 'user-image user-image-border-man'\r\n\t\t\t\t\t\t: 'user-image'\r\n\t\t\t\t}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t<div className=\"users-table__row__div userName\">\r\n\t\t\t{`${user.name.first} ${user.name.last}`}\r\n\t\t</div>\r\n\t\t<div className=\"users-table__row__div\">\r\n\t\t\t<img\r\n\t\t\t\tclassName=\"chip-flag-table\"\r\n\t\t\t\tsrc={`https://www.countryflags.io/${user.nat}/shiny/32.png`}\r\n\t\t\t\talt={user.nat}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t<div className=\"users-table__row__div\">{user.location.country}</div>\r\n\t</div>\r\n);\r\n\r\nexport default UserRow;\r\n","//HOC for users grid\r\nconst Users: React.FC = ({ children }) => {\r\n\treturn <div className=\"users-table\">{children}</div>;\r\n};\r\n\r\nexport default Users;\r\n","import { useEffect, useState } from 'react';\r\nimport ScaleLoader from 'react-spinners/ScaleLoader';\r\nimport { paginateGrid } from '../../utils/paginate';\r\nimport serverConfig from '../../data/config.json';\r\nimport { IUsers } from '../../models/user.model';\r\nimport Pagination from './Pagination';\r\nimport UserRow from './UserRow';\r\nimport Users from './Users';\r\nimport './grid.css';\r\n\r\n//Main component for users grid view\r\nconst GridView = ({ usersInfo }: IUsers) => {\r\n\tconst [currentPage, setCurrentPage] = useState<number>(1);\r\n\tconst [pageUsers, setPageUsers] = useState<any[]>([]);\r\n\tconst perPage: number = serverConfig.pageItemCount;\r\n\r\n\tuseEffect(() => {\r\n\t\t//Set data for each page\r\n\t\tif (serverConfig.hasPaginate === true) {\r\n\t\t\tconst newPage = paginateGrid(usersInfo, currentPage, perPage);\r\n\t\t\tsetPageUsers(newPage);\r\n\t\t} else setPageUsers(usersInfo);\r\n\t}, [usersInfo, currentPage, perPage]);\r\n\r\n\t//Set current page\r\n\tconst handlePageChange = (page: number) => {\r\n\t\tsetCurrentPage(page);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Users>\r\n\t\t\t\t{pageUsers.length > 0 ? (\r\n\t\t\t\t\tpageUsers.map((user, index) => {\r\n\t\t\t\t\t\treturn <UserRow key={index} {...user} />;\r\n\t\t\t\t\t})\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<div className=\"loading-page\">\r\n\t\t\t\t\t\t<ScaleLoader loading={true} color={'#4495b3'} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t\t{serverConfig.hasPaginate ? (\r\n\t\t\t\t\t<Pagination\r\n\t\t\t\t\t\ttotalUsers={usersInfo.length}\r\n\t\t\t\t\t\tcurrentPage={currentPage}\r\n\t\t\t\t\t\tonPageChange={handlePageChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t) : null}\r\n\t\t\t</Users>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default GridView;\r\n","import axios from 'axios';\r\nimport serverConfig from '../data/config.json';\r\n\r\n//* Server configs\r\n//API for fetching random users via https://randomuser.me/documentation\r\nexport const server = axios.create({\r\n\tbaseURL: serverConfig.fetchUsersApiUrl,\r\n\theaders: {\r\n\t\t'Content-Type': 'application/json',\r\n\t},\r\n});\r\n","import { server } from './server';\r\nimport serverConfig from '../data/config.json';\r\n\r\n///////////////////////////////////////////////////////////////////////////\r\n//Get Random users info from https://randomuser.me/documentation\r\n//params: usersCount: Count of users to fetch\r\n///////////////////////////////////////////////////////////////////////////\r\nexport const fetchUsers = () => {\r\n\t//Limitation for max 100 users\r\n\tlet usersCount = serverConfig.fetchItemsCount;\r\n\tif (usersCount > 100) usersCount = 100;\r\n\r\n\tconst url = `?results=${usersCount}&inc=name,location,picture,nat&nat=AU,BR,CA,CH,DE,DK,ES,FI,GB,IE,FR,NL,NZ,TR,US`;\r\n\r\n\treturn server.get(url);\r\n};\r\n","interface IHeader {\r\n\t// onDropdownChange: (event: React.ChangeEvent<HTMLSelectElement>) => void; //Method for change view mode(Grid/Card)\r\n\tonDropdownChange: () => void;\r\n\tbuttonMode: boolean;\r\n}\r\n\r\n//Page's header\r\nconst Header = ({ onDropdownChange, buttonMode }: IHeader) => {\r\n\treturn (\r\n\t\t<div className=\"topbar\">\r\n\t\t\t<header>\r\n\t\t\t\t<h4 className=\"navbar-brand \">\r\n\t\t\t\t\t<span className=\"brand-img\">{'\\u00A0'}</span>\r\n\t\t\t\t\tRANDO\r\n\t\t\t\t\t<span className=\"brand-r\">M</span>\r\n\t\t\t\t\tEMBERS\r\n\t\t\t\t</h4>\r\n\t\t\t</header>\r\n\t\t\t<button onClick={onDropdownChange} className=\"view-selected\">\r\n\t\t\t\t{buttonMode ? 'Grid View' : 'Card View'}\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import { useEffect, useState } from 'react';\r\nimport ScaleLoader from 'react-spinners/ScaleLoader';\r\nimport { toast } from 'react-toastify';\r\nimport CardView from './components/CardView/CardView';\r\nimport GridView from './components/GridView/GridView';\r\nimport { fetchUsers } from './services/usersServices';\r\nimport Header from './components/Header';\r\n\r\nfunction App() {\r\n\tconst [viewMode, setViewMode] = useState(true);\r\n\tconst [users, setUsers] = useState<any[]>([]);\r\n\tconst [error, setError] = useState(false);\r\n\r\n\t///////////////////////////////////////////////////////////////////////\r\n\t//Get Users Data to display via API\r\n\t//note: all parameter read from ./data/config.json\r\n\t///////////////////////////////////////////////////////////////////////\r\n\tconst getUsers = async () => {\r\n\t\ttry {\r\n\t\t\tconst result: any = await fetchUsers();\r\n\t\t\tconst arr = result.data.results;\r\n\r\n\t\t\tsetUsers(arr);\r\n\t\t} catch (err) {\r\n\t\t\ttoast.error('There is a problem, please try again later.');\r\n\t\t\tsetError(true);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tgetUsers();\r\n\t}, []);\r\n\r\n\t//Switch view mode in Card View and Grid View\r\n\tconst handleChangeViewMode = () => {\r\n\t\tsetViewMode(!viewMode);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{users.length === 0 && !error ? (\r\n\t\t\t\t<div className=\"loading-page\">\r\n\t\t\t\t\t<ScaleLoader loading={true} color={'#4495b3'} />\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<Header onDropdownChange={handleChangeViewMode} buttonMode={viewMode} />\r\n\t\t\t)}\r\n\t\t\t{error ? (\r\n\t\t\t\t<h5 className=\"loading-page\">\r\n\t\t\t\t\tThere is something wrog, please try again later.\r\n\t\t\t\t</h5>\r\n\t\t\t) : null}\r\n\t\t\t{viewMode === true ? (\r\n\t\t\t\tusers.length > 0 ? (\r\n\t\t\t\t\t<CardView usersInfo={users} />\r\n\t\t\t\t) : null\r\n\t\t\t) : users.length > 0 ? (\r\n\t\t\t\t<GridView usersInfo={users} />\r\n\t\t\t) : null}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ToastContainer, Flip } from 'react-toastify';\r\nimport App from './App';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t\t<ToastContainer\r\n\t\t\tposition=\"bottom-left\"\r\n\t\t\tautoClose={3000}\r\n\t\t\thideProgressBar={true}\r\n\t\t\ttransition={Flip}\r\n\t\t/>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}